{"version":3,"sources":["components/cards/change-colour.js","components/structure/content.js","App.js","components/structure/navbar.js","components/tasks/task-one/modal.js","change-colour.js","serviceWorker.js","index.js"],"names":["ChangeColour","props","react_default","a","createElement","Card","CardImg","top","width","src","alt","CardBody","CardTitle","className","CardSubtitle","CardText","href","Content","class","change_colour","App","content","React","Component","Example","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","Navbar","color","light","expand","fixed","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","ModalColour","modal","prevState","Modal","ModalHeader","title","ModalBody","colour","ModalFooter","Button","ColourChange","ColourModalRef","_ref","showModal","handleClick","event","console","log","target","getAttribute","getColours","value","key","requireDarkBg","map","item","index","_this2","id","e","ref","Boolean","window","location","hostname","match","routing","react_router_dom","basename","process","navbar_Example","react_router","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e66d7c67.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardImg, CardText, CardBody,\n  CardTitle, CardSubtitle } from 'reactstrap';\n\nconst ChangeColour = (props) => {\n  return (\n    <div>\n      <Card>\n        <CardImg top width=\"100%\" src=\"https://i1.creativecow.net/u/107592/paints_more_usethisonesmall.jpg\" alt=\"Card image cap\" />\n        <CardBody>\n          <CardTitle><h6 className=\"card-title\">Change Modal's Colour On Click</h6></CardTitle>\n          <CardSubtitle></CardSubtitle>\n          <CardText></CardText>\n          <a className=\"btn btn-default float-right\" href=\"/change-colour\" >See More</a>\n        </CardBody>\n      </Card>\n    </div>\n  );\n};\n\nexport default ChangeColour;","import React from 'react';\nimport ChangeColour from '../cards/change-colour';\n\nfunction Content() {\n  return (\n    <div className=\"container mt-5 pt-5\">\n      <div className=\"row mb-3\">\n        <div className=\"col-12\">\n          <h3><span class=\"glyphicon glyphicon-tasks\"> </span> React.Js Tasks</h3>\n          <hr/>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <ChangeColour />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Content;\n","import React from 'react';\nimport Content from './components/structure/content';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Content />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nexport default class Example extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\" fixed='top'>\n          <NavbarBrand href=\"/\">Digi-X / Lunch and Learn</NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/abouts/\">About</NavLink>\n              </NavItem>\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret>\n                  Tasks\n                </DropdownToggle>\n                <DropdownMenu right>\n                  <DropdownItem>\n                    <a href=\"/change-colour\"> Change Colours</a>\n                  </DropdownItem>\n                  <DropdownItem divider />\n                  <DropdownItem>\n                  <a href=\"/\"> See All Tasks</a>\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}","/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\n\nimport React from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\n\nclass ModalColour extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>{ this.props.title }</ModalHeader>\n          <ModalBody>\n            {this.props.colour} is selected.\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.toggle}>Close</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default ModalColour;","import React from 'react'\nimport { Button } from 'reactstrap';\nimport ModalColour from './components/tasks/task-one/modal';\n\nclass ColourChange extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colour: 'No colour Selected'\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  ColourModalRef = ({toggle}) => {\n    this.showModal = toggle;\n  }\n \n  handleClick = (event) => {\n    console.log(event.target.getAttribute('id'));\n    let color = this.getColours()[event.target.getAttribute('id')]\n    this.setState({\n      colour: color.value\n    });\n    this.showModal();\n  }\n\n  getColours() {\n    return [{\n      key: 'primary',\n      value: 'Blue'\n    }, {\n      key: 'danger',\n      value: 'Red'\n    }, {\n      key: 'warning',\n      value: 'Yellow',\n      requireDarkBg: true\n    }, {\n      key: 'light',\n      value: 'White',\n      requireDarkBg: true\n    }, {\n      key: 'dark',\n      value: 'Black'\n    },{\n      key: 'info',\n      value: 'Cloud Blue'\n    }]\n  }\n \n  render() {\n    return (\n      <div className=\"container mt-5 pt-5\">\n        <div className=\"row mb-3\">\n          <div className=\"col-12\">\n            <h3>Task: Change Colour</h3>\n            <hr/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-4 mb-4\">\n            <h6 className=\"card-title\">OBJECTIVES:</h6>\n            <hr/>\n            <ol>\n              {/* <li>To create first react app.</li> */}\n              <li>To create components for the folowing items:</li>\n                <ul>\n                  <li>Modal</li>\n                  <li>Buttons</li>\n                </ul>\n              <li>To change colour based on clicking buttons.</li>\n            </ol>\n          </div>\n          <div className=\"col-md-8\">\n            <h6 className=\"card-title\">RESULT:</h6>\n            <hr/>\n            {\n              this.getColours().map(function (item, index) {\n                return <Button key={index} id={index} className=\"m-3 btn-lg\" color={item.key} onClick={(e) => this.handleClick(e)}>{item.value}</Button>\n              }, this)                                \n            }\n            <ModalColour colour={ this.state.colour } title={ this.state.colour } ref={this.ColourModalRef} />\n          </div>\n        </div>\n      </div>\n    );\n    \n  }\n}\nexport default ColourChange","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport Navbar from './components/structure/navbar';\nimport ColourChange from './change-colour'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst routing = (\n    // <Router basename=\"/task-one-change-colour\">\n    <Router basename={process.env.PUBLIC_URL}>\n      <div>\n        <Navbar />\n        <Route exact path=\"/\" component={App} />\n        <Route path=\"/change-colour\" component={ColourChange} />\n      </div>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}